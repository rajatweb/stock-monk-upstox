// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file marketDataFeed.proto (package com.upstox.marketdatafeeder.rpc.proto, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from enum com.upstox.marketdatafeeder.rpc.proto.Type
 */
export enum Type {
  /**
   * @generated from enum value: initial_feed = 0;
   */
  initial_feed = 0,

  /**
   * @generated from enum value: live_feed = 1;
   */
  live_feed = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Type)
proto3.util.setEnumType(Type, "com.upstox.marketdatafeeder.rpc.proto.Type", [
  { no: 0, name: "initial_feed" },
  { no: 1, name: "live_feed" },
]);

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.LTPC
 */
export class LTPC extends Message<LTPC> {
  /**
   * @generated from field: double ltp = 1;
   */
  ltp = 0;

  /**
   * @generated from field: int64 ltt = 2;
   */
  ltt = protoInt64.zero;

  /**
   * @generated from field: int64 ltq = 3;
   */
  ltq = protoInt64.zero;

  /**
   * close price
   *
   * @generated from field: double cp = 4;
   */
  cp = 0;

  constructor(data?: PartialMessage<LTPC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.LTPC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ltp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "ltt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ltq", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "cp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LTPC {
    return new LTPC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LTPC {
    return new LTPC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LTPC {
    return new LTPC().fromJsonString(jsonString, options);
  }

  static equals(a: LTPC | PlainMessage<LTPC> | undefined, b: LTPC | PlainMessage<LTPC> | undefined): boolean {
    return proto3.util.equals(LTPC, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.MarketLevel
 */
export class MarketLevel extends Message<MarketLevel> {
  /**
   * @generated from field: repeated com.upstox.marketdatafeeder.rpc.proto.Quote bidAskQuote = 1;
   */
  bidAskQuote: Quote[] = [];

  constructor(data?: PartialMessage<MarketLevel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.MarketLevel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bidAskQuote", kind: "message", T: Quote, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarketLevel {
    return new MarketLevel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarketLevel {
    return new MarketLevel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarketLevel {
    return new MarketLevel().fromJsonString(jsonString, options);
  }

  static equals(a: MarketLevel | PlainMessage<MarketLevel> | undefined, b: MarketLevel | PlainMessage<MarketLevel> | undefined): boolean {
    return proto3.util.equals(MarketLevel, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.MarketOHLC
 */
export class MarketOHLC extends Message<MarketOHLC> {
  /**
   * @generated from field: repeated com.upstox.marketdatafeeder.rpc.proto.OHLC ohlc = 1;
   */
  ohlc: OHLC[] = [];

  constructor(data?: PartialMessage<MarketOHLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.MarketOHLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ohlc", kind: "message", T: OHLC, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarketOHLC {
    return new MarketOHLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarketOHLC {
    return new MarketOHLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarketOHLC {
    return new MarketOHLC().fromJsonString(jsonString, options);
  }

  static equals(a: MarketOHLC | PlainMessage<MarketOHLC> | undefined, b: MarketOHLC | PlainMessage<MarketOHLC> | undefined): boolean {
    return proto3.util.equals(MarketOHLC, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.Quote
 */
export class Quote extends Message<Quote> {
  /**
   * bid quantity
   *
   * @generated from field: int32 bq = 1;
   */
  bq = 0;

  /**
   * bid price
   *
   * @generated from field: double bp = 2;
   */
  bp = 0;

  /**
   * bid number of orders
   *
   * @generated from field: int32 bno = 3;
   */
  bno = 0;

  /**
   * ask quantity
   *
   * @generated from field: int32 aq = 4;
   */
  aq = 0;

  /**
   * ask price
   *
   * @generated from field: double ap = 5;
   */
  ap = 0;

  /**
   * ask number of orders
   *
   * @generated from field: int32 ano = 6;
   */
  ano = 0;

  constructor(data?: PartialMessage<Quote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.Quote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bq", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "bp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "bno", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "aq", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "ap", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "ano", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Quote {
    return new Quote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Quote {
    return new Quote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Quote {
    return new Quote().fromJsonString(jsonString, options);
  }

  static equals(a: Quote | PlainMessage<Quote> | undefined, b: Quote | PlainMessage<Quote> | undefined): boolean {
    return proto3.util.equals(Quote, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.OptionGreeks
 */
export class OptionGreeks extends Message<OptionGreeks> {
  /**
   * option price
   *
   * @generated from field: double op = 1;
   */
  op = 0;

  /**
   * underlying price
   *
   * @generated from field: double up = 2;
   */
  up = 0;

  /**
   * implied volatility
   *
   * @generated from field: double iv = 3;
   */
  iv = 0;

  /**
   * @generated from field: double delta = 4;
   */
  delta = 0;

  /**
   * @generated from field: double theta = 5;
   */
  theta = 0;

  /**
   * @generated from field: double gamma = 6;
   */
  gamma = 0;

  /**
   * @generated from field: double vega = 7;
   */
  vega = 0;

  /**
   * @generated from field: double rho = 8;
   */
  rho = 0;

  constructor(data?: PartialMessage<OptionGreeks>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.OptionGreeks";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "op", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "up", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "iv", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "delta", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "theta", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "gamma", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "vega", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "rho", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionGreeks {
    return new OptionGreeks().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionGreeks {
    return new OptionGreeks().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionGreeks {
    return new OptionGreeks().fromJsonString(jsonString, options);
  }

  static equals(a: OptionGreeks | PlainMessage<OptionGreeks> | undefined, b: OptionGreeks | PlainMessage<OptionGreeks> | undefined): boolean {
    return proto3.util.equals(OptionGreeks, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails
 */
export class ExtendedFeedDetails extends Message<ExtendedFeedDetails> {
  /**
   * avg traded price
   *
   * @generated from field: double atp = 1;
   */
  atp = 0;

  /**
   * close price
   *
   * @generated from field: double cp = 2;
   */
  cp = 0;

  /**
   * volume traded today
   *
   * @generated from field: int64 vtt = 3;
   */
  vtt = protoInt64.zero;

  /**
   * open interest
   *
   * @generated from field: double oi = 4;
   */
  oi = 0;

  /**
   * change oi
   *
   * @generated from field: double changeOi = 5;
   */
  changeOi = 0;

  /**
   * @generated from field: double lastClose = 6;
   */
  lastClose = 0;

  /**
   * total buy quantity
   *
   * @generated from field: double tbq = 7;
   */
  tbq = 0;

  /**
   * total sell quantity
   *
   * @generated from field: double tsq = 8;
   */
  tsq = 0;

  /**
   * @generated from field: double close = 9;
   */
  close = 0;

  /**
   * lower circuit
   *
   * @generated from field: double lc = 10;
   */
  lc = 0;

  /**
   * upper circuit
   *
   * @generated from field: double uc = 11;
   */
  uc = 0;

  /**
   * yearly high
   *
   * @generated from field: double yh = 12;
   */
  yh = 0;

  /**
   * yearly low
   *
   * @generated from field: double yl = 13;
   */
  yl = 0;

  /**
   * fill price
   *
   * @generated from field: double fp = 14;
   */
  fp = 0;

  /**
   * fill volume
   *
   * @generated from field: int32 fv = 15;
   */
  fv = 0;

  /**
   * mbp buy
   *
   * @generated from field: int64 mbpBuy = 16;
   */
  mbpBuy = protoInt64.zero;

  /**
   * mbp sell
   *
   * @generated from field: int64 mbpSell = 17;
   */
  mbpSell = protoInt64.zero;

  /**
   * traded volume
   *
   * @generated from field: int64 tv = 18;
   */
  tv = protoInt64.zero;

  /**
   * day high open interest
   *
   * @generated from field: double dhoi = 19;
   */
  dhoi = 0;

  /**
   * day low open interest
   *
   * @generated from field: double dloi = 20;
   */
  dloi = 0;

  /**
   * spot price
   *
   * @generated from field: double sp = 21;
   */
  sp = 0;

  /**
   * previous open interest
   *
   * @generated from field: double poi = 22;
   */
  poi = 0;

  constructor(data?: PartialMessage<ExtendedFeedDetails>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "atp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "cp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "vtt", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "oi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "changeOi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "lastClose", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "tbq", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 8, name: "tsq", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 9, name: "close", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 10, name: "lc", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 11, name: "uc", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 12, name: "yh", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 13, name: "yl", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 14, name: "fp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 15, name: "fv", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 16, name: "mbpBuy", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "mbpSell", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 18, name: "tv", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 19, name: "dhoi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 20, name: "dloi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 21, name: "sp", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 22, name: "poi", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtendedFeedDetails {
    return new ExtendedFeedDetails().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtendedFeedDetails {
    return new ExtendedFeedDetails().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtendedFeedDetails {
    return new ExtendedFeedDetails().fromJsonString(jsonString, options);
  }

  static equals(a: ExtendedFeedDetails | PlainMessage<ExtendedFeedDetails> | undefined, b: ExtendedFeedDetails | PlainMessage<ExtendedFeedDetails> | undefined): boolean {
    return proto3.util.equals(ExtendedFeedDetails, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.OHLC
 */
export class OHLC extends Message<OHLC> {
  /**
   * @generated from field: string interval = 1;
   */
  interval = "";

  /**
   * @generated from field: double open = 2;
   */
  open = 0;

  /**
   * @generated from field: double high = 3;
   */
  high = 0;

  /**
   * @generated from field: double low = 4;
   */
  low = 0;

  /**
   * @generated from field: double close = 5;
   */
  close = 0;

  /**
   * @generated from field: int32 volume = 6;
   */
  volume = 0;

  /**
   * @generated from field: int64 ts = 7;
   */
  ts = protoInt64.zero;

  constructor(data?: PartialMessage<OHLC>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.OHLC";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "interval", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "open", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "close", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "volume", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "ts", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OHLC {
    return new OHLC().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OHLC {
    return new OHLC().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OHLC {
    return new OHLC().fromJsonString(jsonString, options);
  }

  static equals(a: OHLC | PlainMessage<OHLC> | undefined, b: OHLC | PlainMessage<OHLC> | undefined): boolean {
    return proto3.util.equals(OHLC, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed
 */
export class MarketFullFeed extends Message<MarketFullFeed> {
  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.LTPC ltpc = 1;
   */
  ltpc?: LTPC;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.MarketLevel marketLevel = 2;
   */
  marketLevel?: MarketLevel;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.OptionGreeks optionGreeks = 3;
   */
  optionGreeks?: OptionGreeks;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.MarketOHLC marketOHLC = 4;
   */
  marketOHLC?: MarketOHLC;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails eFeedDetails = 5;
   */
  eFeedDetails?: ExtendedFeedDetails;

  constructor(data?: PartialMessage<MarketFullFeed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ltpc", kind: "message", T: LTPC },
    { no: 2, name: "marketLevel", kind: "message", T: MarketLevel },
    { no: 3, name: "optionGreeks", kind: "message", T: OptionGreeks },
    { no: 4, name: "marketOHLC", kind: "message", T: MarketOHLC },
    { no: 5, name: "eFeedDetails", kind: "message", T: ExtendedFeedDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MarketFullFeed {
    return new MarketFullFeed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MarketFullFeed {
    return new MarketFullFeed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MarketFullFeed {
    return new MarketFullFeed().fromJsonString(jsonString, options);
  }

  static equals(a: MarketFullFeed | PlainMessage<MarketFullFeed> | undefined, b: MarketFullFeed | PlainMessage<MarketFullFeed> | undefined): boolean {
    return proto3.util.equals(MarketFullFeed, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed
 */
export class IndexFullFeed extends Message<IndexFullFeed> {
  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.LTPC ltpc = 1;
   */
  ltpc?: LTPC;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.MarketOHLC marketOHLC = 2;
   */
  marketOHLC?: MarketOHLC;

  /**
   * @generated from field: double lastClose = 3;
   */
  lastClose = 0;

  /**
   * yearly high
   *
   * @generated from field: double yh = 4;
   */
  yh = 0;

  /**
   * yearly low
   *
   * @generated from field: double yl = 5;
   */
  yl = 0;

  constructor(data?: PartialMessage<IndexFullFeed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ltpc", kind: "message", T: LTPC },
    { no: 2, name: "marketOHLC", kind: "message", T: MarketOHLC },
    { no: 3, name: "lastClose", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "yh", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "yl", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IndexFullFeed {
    return new IndexFullFeed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IndexFullFeed {
    return new IndexFullFeed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IndexFullFeed {
    return new IndexFullFeed().fromJsonString(jsonString, options);
  }

  static equals(a: IndexFullFeed | PlainMessage<IndexFullFeed> | undefined, b: IndexFullFeed | PlainMessage<IndexFullFeed> | undefined): boolean {
    return proto3.util.equals(IndexFullFeed, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.FullFeed
 */
export class FullFeed extends Message<FullFeed> {
  /**
   * @generated from oneof com.upstox.marketdatafeeder.rpc.proto.FullFeed.FullFeedUnion
   */
  FullFeedUnion: {
    /**
     * @generated from field: com.upstox.marketdatafeeder.rpc.proto.MarketFullFeed marketFF = 1;
     */
    value: MarketFullFeed;
    case: "marketFF";
  } | {
    /**
     * @generated from field: com.upstox.marketdatafeeder.rpc.proto.IndexFullFeed indexFF = 2;
     */
    value: IndexFullFeed;
    case: "indexFF";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<FullFeed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.FullFeed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "marketFF", kind: "message", T: MarketFullFeed, oneof: "FullFeedUnion" },
    { no: 2, name: "indexFF", kind: "message", T: IndexFullFeed, oneof: "FullFeedUnion" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FullFeed {
    return new FullFeed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FullFeed {
    return new FullFeed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FullFeed {
    return new FullFeed().fromJsonString(jsonString, options);
  }

  static equals(a: FullFeed | PlainMessage<FullFeed> | undefined, b: FullFeed | PlainMessage<FullFeed> | undefined): boolean {
    return proto3.util.equals(FullFeed, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.OptionChain
 */
export class OptionChain extends Message<OptionChain> {
  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.LTPC ltpc = 1;
   */
  ltpc?: LTPC;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.Quote bidAskQuote = 2;
   */
  bidAskQuote?: Quote;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.OptionGreeks optionGreeks = 3;
   */
  optionGreeks?: OptionGreeks;

  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.ExtendedFeedDetails eFeedDetails = 4;
   */
  eFeedDetails?: ExtendedFeedDetails;

  constructor(data?: PartialMessage<OptionChain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.OptionChain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ltpc", kind: "message", T: LTPC },
    { no: 2, name: "bidAskQuote", kind: "message", T: Quote },
    { no: 3, name: "optionGreeks", kind: "message", T: OptionGreeks },
    { no: 4, name: "eFeedDetails", kind: "message", T: ExtendedFeedDetails },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OptionChain {
    return new OptionChain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OptionChain {
    return new OptionChain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OptionChain {
    return new OptionChain().fromJsonString(jsonString, options);
  }

  static equals(a: OptionChain | PlainMessage<OptionChain> | undefined, b: OptionChain | PlainMessage<OptionChain> | undefined): boolean {
    return proto3.util.equals(OptionChain, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.Feed
 */
export class Feed extends Message<Feed> {
  /**
   * @generated from oneof com.upstox.marketdatafeeder.rpc.proto.Feed.FeedUnion
   */
  FeedUnion: {
    /**
     * @generated from field: com.upstox.marketdatafeeder.rpc.proto.LTPC ltpc = 1;
     */
    value: LTPC;
    case: "ltpc";
  } | {
    /**
     * @generated from field: com.upstox.marketdatafeeder.rpc.proto.FullFeed ff = 2;
     */
    value: FullFeed;
    case: "ff";
  } | {
    /**
     * @generated from field: com.upstox.marketdatafeeder.rpc.proto.OptionChain oc = 3;
     */
    value: OptionChain;
    case: "oc";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Feed>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.Feed";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ltpc", kind: "message", T: LTPC, oneof: "FeedUnion" },
    { no: 2, name: "ff", kind: "message", T: FullFeed, oneof: "FeedUnion" },
    { no: 3, name: "oc", kind: "message", T: OptionChain, oneof: "FeedUnion" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Feed {
    return new Feed().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Feed {
    return new Feed().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Feed {
    return new Feed().fromJsonString(jsonString, options);
  }

  static equals(a: Feed | PlainMessage<Feed> | undefined, b: Feed | PlainMessage<Feed> | undefined): boolean {
    return proto3.util.equals(Feed, a, b);
  }
}

/**
 * @generated from message com.upstox.marketdatafeeder.rpc.proto.FeedResponse
 */
export class FeedResponse extends Message<FeedResponse> {
  /**
   * @generated from field: com.upstox.marketdatafeeder.rpc.proto.Type type = 1;
   */
  type = Type.initial_feed;

  /**
   * @generated from field: map<string, com.upstox.marketdatafeeder.rpc.proto.Feed> feeds = 2;
   */
  feeds: { [key: string]: Feed } = {};

  constructor(data?: PartialMessage<FeedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "com.upstox.marketdatafeeder.rpc.proto.FeedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(Type) },
    { no: 2, name: "feeds", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: Feed} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeedResponse {
    return new FeedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeedResponse {
    return new FeedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeedResponse {
    return new FeedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: FeedResponse | PlainMessage<FeedResponse> | undefined, b: FeedResponse | PlainMessage<FeedResponse> | undefined): boolean {
    return proto3.util.equals(FeedResponse, a, b);
  }
}

